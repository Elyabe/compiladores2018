options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;
public class Compilador
{ 
   public static void main(String args[])  throws ParseException
   {
      Compilador compilador = null;
      try
      {
         compilador = new Compilador(new FileInputStream("exemplo03.spc"));
         Compilador.inicio();
         System.out.println("Compilado com sucesso!");
      }
      catch(FileNotFoundException e)
      {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e)
      {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] :
{
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}

//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] :
{
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
void inicio() : { }
{
	( comando() )* < EOF > 
}

void expressao() : { }
{
	termo() ( < OU > termo() )*
}

void termo() : { }
{
	termo1()( < IGUAL > termo1() )?
}

void termo1() : { }
{
	termo2()( < CONCAT > termo2() )*
}

void termo2() : { }
{
	termo3()( ( < SOMA > | < SUB > ) termo3() )*
}

void termo3() : { }
{
	termo4()( ( < MUL > | < DIV > ) termo4() )*
}

void termo4() : { }
{
	< AP > expressao() < FP > |
	< NUM > |
	< SOMA > < NUM > |
	< SUB > < NUM > |
	< VAR > |
	< STRING >
}

void comando() : { }
{
	atribuicao() |
	declaracao() |
	se() |
	enquanto() |
	le() |
	exibe()
}

void atribuicao() : { }
{
	< VAR > <ATRIB > expressao() < PV >
}

void declaracao() : { }
{
	( < NUM > | < PALAVRA > ) < VAR > ( < ATRIB > expressao() )?
	(< VIRGULA > < VAR > ( < ATRIB > expressao() )? )* < PV >
}

void se() : { }
{
	< SE > < AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto() : { }
{
	< ENQUANTO > < AP > expressao() < FP > inicio() < FIMENQUANTO >
}

void le() : { }
{
	< LEITURA > < VAR > expressao() ( < VIRGULA > < VAR > )* < PV >
}

void exibe() : { }
{
	< EXIBE > expressao() ( < VIRGULA > expressao() )* < PV >
}
